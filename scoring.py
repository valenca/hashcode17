import operator
from sys import argv

"""
Scores the output file
"""
def scoreOutputFile(outputFile, requests, endpoints):
    cachedVideos = readOutputFile(outputFile)

    scoreNumerator = 0
    scoreDenominator = 0

    for request in requests:
        video, endpoint, cardinality = request
        rootServerLatency, nCaches = endpoints[endpoint][0]
        requestGain = outputFile_getLatencyGainForRequest(video, rootServerLatency, endpoints[endpoint][1], cachedVideos)

        scoreNumerator += requestGain * cardinality
        scoreDenominator += cardinality

    return ((scoreNumerator*1.0) / scoreDenominator) * 1000

"""
Used to get the latency gain of the caches versus root dc when scoring the output file.
"""
def outputFile_getLatencyGainForRequest(video, rootServerLatency, cacheConnections, cachedVideos):

        improvement = 0

        for cacheServer in cacheConnections.keys():
            latency = cacheConnections[cacheServer]

            if video in cachedVideos[cacheServer]:
                improvement = max(improvement, rootServerLatency - latency)

        return improvement
"""
Reads the file outputed by the program from stdin
TESTED!!
"""
def readOutputFile(outputfile):

    input = [i.strip() for i in open(outputfile, 'r').read().split('\n') if i != '']

    nCacheServers = int(input[0])
    cachedVideos = {}

    for i in input[1:]:
        line = list(map(int, i.split()))
        cacheServerId = line[0]
        videos = line[1:]

        cachedVideos[cacheServerId] = videos

    return cachedVideos

"""
Scores an instance generated by carlos local search algorithm
"""
def scoreLocalSearchInstance(cacheServers, requests, endpoints):

    scoreNumerator = 0
    scoreDenominator = 0

    for request in requests:
        video, endpoint, cardinality = request
        rootServerLatency, nCaches = endpoints[endpoint][0]
        requestGain = getLatencyGainForRequest(video, rootServerLatency, endpoints[endpoint][1], cacheServers)

        scoreNumerator += requestGain * cardinality
        scoreDenominator += cardinality

    return (scoreNumerator / scoreDenominator) * 1000

"""
Delivers the latency gain from using the best cache server instead of the root server
"""
def getLatencyGainForRequest(video, rootServerLatency, cacheConnections, cacheServers):

        latencies = {}

        for cacheServer in cacheConnections.keys():
            latency = cacheConnections[cacheServer]
            if cacheServers[cacheServer][video] != 0:
                improvement = rootServerLatency - latency
                if (improvement > 0):
                    latencies[cacheServer] = improvement

        if len(latencies) == 0:
            return 0
        else:
            return max(latencies.values())

"""
Reads the input file and returns requests and endpoints
"""
def readInputFile(inputFile):
    endpoints = []
    requests = []
    with open(inputFile, 'r') as f:
        lines = f.readlines()
        V,E,R,C,X = list(map(int,lines[0].split()))
        videos = list(map(int,lines[1].split()))
        l = 2
        for _ in range(E):
            endpoints.append([list(map(int,lines[l].split()))])
            l += 1
            endpoint = []
            for _ in range(endpoints[-1][0][1]):
                endpoint.append(list(map(int,lines[l].split())))
                l += 1
            endpoints[-1].append(dict(endpoint))

        requests = []
        for _ in range(R):
            requests.append(list(map(int,lines[l].split())))
            l += 1

    return endpoints, requests

if __name__ == "__main__":
    if(len(argv) != 3):
        print("Usage: ")
        print("  python scoring.py inputFile outputFile")
        exit(0)

    endpoints, requests = readInputFile(argv[1])

    print("Score: " + str(scoreOutputFile(argv[2], requests, endpoints)))
